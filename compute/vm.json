{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password of the Virtual Machine."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username of the Virtual Machine."
      }
    },
    "availabilitySet": {
      "type": "string",
      "metadata": {
        "description": "Availability set"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual machine."
      }
    },
    "publicIpAddressType": {
      "type": "string",
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Public IP address"
      }
    },
    "resourceGroupVirtualNetwork": {
      "type": "string",
      "metadata": {
        "description": "Resource group of the Virtual Network"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network name"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Subnet name"
      }
    },
    "vmSize": {
      "type": "string",
      "allowedValues": [
        "Standard_A1_v2",
        "Standard_A2m_v2",
        "Standard_A2_v2",
        "Standard_A4m_v2",
        "Standard_A4_v2",
        "Standard_A8m_v2",
        "Standard_A8_v2",
        "Standard_B1ms",
        "Standard_B1s",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D64_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D64s_v3",
        "Standard_E2_v3",
        "Standard_E4_v3",
        "Standard_E8_v3",
        "Standard_E16_v3",
        "Standard_E32_v3",
        "Standard_E64_v3",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_H8",
        "Standard_H16",
        "Standard_H8m",
        "Standard_H16m",
        "Standard_H16r",
        "Standard_H16mr",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_M64s",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M128ms",
        "Standard_NC6",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6s_v2",
        "Standard_NC12s_v2",
        "Standard_NC24s_v2",
        "Standard_NC24rs_v2",
        "Standard_ND6s",
        "Standard_ND12s",
        "Standard_ND24s",
        "Standard_ND24rs",
        "Standard_NV6",
        "Standard_NV12",
        "Standard_NV24"
      ],
      "metadata": {
        "description": "Size of the virtual machine."
      }
    },
    "imageVersionWindows": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2016-Datacenter",
        "2016-Datacenter-smalldisk",
        "2016-Datacenter-Server-Core",
        "2016-Datacenter-Server-Core-smalldisk",
        "2016-Datacenter-with-Containers",
        "2016-Nano-Server",
        "Datacenter-Core-1709-smalldisk",
        "Datacenter-Core-1709-with-Containers-smalldisk"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "imageVersionCentOs": {
      "type": "string",
      "defaultValue": "7.4",
      "allowedValues": [
        "7.2",
        "7.2n",
        "7.3",
        "7.4"
      ],
      "metadata": {
        "description": "The CentOS version for the VM. This will pick a fully patched image of this given CentOS version."
      }
    },
    "imageVersionUbuntu": {
      "type": "string",
      "defaultValue": "16.04-DAILY-LTS",
      "allowedValues": [
        "16.04-LTS",
        "16.04-DAILY-LTS",
        "17.10",
        "17.10-DAILY",
        "18.04-DAILY-LTS"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of VMs to create"
      }
    },
    "vmNumeration": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Start numeration of VMs. E.g. Set value to 1 for DC1 and set value to 2 for DC2 if DC1 exists!"
      }
    },
    "availabilitySetDeployment": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Whether the VM will be deployed to an AV set or not."
      }
    },
    "azureHybridBenefitWindows": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Whether the VM will have an existing license assigned or not."
      }
    },
    "publicIpAddressDeployment": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Whether the VM will have a public IP or not."
      }
    },
    "operatingSystemSelection": {
      "type": "string",
      "defaultValue": "windows",
      "allowedValues": [
        "windows",
        "centos",
        "ubuntu"
      ],
      "metadata": {
        "description": "Whether the VM will have a Windows or Linux as OS."
      }
    }
  },
  "variables": {
    "apiVersion": {
      "compute": "2017-03-30",
      "network": "2017-10-01",
      "storage": "2017-10-01",
      "devTestLab": "2017-04-26-preview"
    },
    "deploymentConfiguration": {
      "availabilitySetDeployment": "[parameters('availabilitySetDeployment')]",
      "azureHybridBenefitWindows": "[parameters('azureHybridBenefitWindows')]",
      "publicIpAddressDeployment": "[parameters('publicIpAddressDeployment')]",
      "operatingSystemSelection": "[parameters('operatingSystemSelection')]",
      "numberOfInstances": "[parameters('numberOfInstances')]",
      "vmNumeration": "[parameters('vmNumeration')]"
    },
    "networkConfiguration": {
      "resourceGroupVirtualNetwork": "[parameters('resourceGroupVirtualNetwork')]",
      "virtualNetworkName": "[parameters('virtualNetworkName')]",
      "subnetName": "[parameters('subnetName')]",
      "publicIpAddressType": "[parameters('publicIpAddressType')]"
    },
    "osConfiguration": {
      "imageOfferWindows": "WindowsServer",
      "imagePublisherWindows": "MicrosoftWindowsServer",
      "imageVersionWindows": "[parameters('imageVersionWindows')]",
      "imageOfferCentOs": "CentOS",
      "imagePublisherCentOs": "OpenLogic",
      "imageVersionCentOs": "[parameters('imageVersionCentOs')]",
      "imageOfferUbuntu": "UbuntuServer",
      "imagePublisherUbuntu": "Canonical",
      "imageVersionUbuntu": "[parameters('imageVersionUbuntu')]"
    },
    "storageConfiguration": {
      "bootDiagnostics": "[concat(uniqueString(resourceGroup().id),'bootdiag')]",
      "storageAccountType": "Standard_LRS"
    },
    "vmConfiguration": {
      "adminPassword": "[parameters('adminPassword')]",
      "adminUsername": "[parameters('adminUsername')]",
      "vmName": "[parameters('vmName')]",
      "vmSize": "[parameters('vmSize')]"
    },
    "namingSuffix": {
      "nicName": "-nic1",
      "osDiskName": "-osdisk",
      "publicIPAddressName": "-publicip1"
    },
    "availabilitySet": {
      "id": {
        "id": "[resourceId('Microsoft.Compute/availabilitySets',parameters('availabilitySet'))]"
      },
      "name": "[parameters('availabilitySet')]"
    },
    "windowsConfiguration": {
      "provisionVmAgent": true,
      "enableAutomaticUpdates": true
    },
    "outputArray": {
      "copy": [
        {
          "name": "vmProperties",
          "count": "[parameters('numberofInstances')]",
          "input": {
            "name": "[concat(parameters('vmName'),copyIndex('vmProperties',parameters('vmNumeration')))]",
            "value": "[resourceId('Microsoft.Compute/virtualMachines',concat(parameters('vmName'),copyIndex('vmProperties',parameters('vmNumeration'))))]"
          }
        }
      ]
    }
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion').storage]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[toLower(variables('storageConfiguration').bootDiagnostics)]",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "[variables('storageConfiguration').storageAccountType]"
      },
      "properties": {
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          }
        },
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "condition": "[equals(variables('deploymentConfiguration').availabilitySetDeployment,'yes')]",
      "apiVersion": "[variables('apiVersion').compute]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySet').name]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "condition": "[equals(variables('deploymentConfiguration').publicIpAddressDeployment,'yes')]",
      "apiVersion": "[variables('apiVersion').network]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').publicIPAddressName)]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "publicIPLoop",
        "count": "[variables('deploymentConfiguration').numberOfInstances]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('networkConfiguration').publicIpAddressType]",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration)))]"
        }
      }
    },
    {
      "condition": "[equals(variables('deploymentConfiguration').publicIpAddressDeployment,'yes')]",
      "apiVersion": "[variables('apiVersion').network]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').nicName,'-pip')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('deploymentConfiguration').numberOfInstances]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').publicIPAddressName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').publicIPAddressName))]"
              },
              "subnet": {
                "id": "[concat(resourceId(variables('networkConfiguration').resourceGroupVirtualNetwork,'Microsoft.Network/virtualNetworks',variables('networkConfiguration').virtualNetworkName),'/subnets/',variables('networkConfiguration').subnetName)]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(variables('deploymentConfiguration').publicIpAddressDeployment,'no')]",
      "apiVersion": "[variables('apiVersion').network]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').nicName)]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('deploymentConfiguration').numberOfInstances]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(resourceId(variables('networkConfiguration').resourceGroupVirtualNetwork,'Microsoft.Network/virtualNetworks',variables('networkConfiguration').virtualNetworkName),'/subnets/',variables('networkConfiguration').subnetName)]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion').compute]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[variables('deploymentConfiguration').numberOfInstances]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/',variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').nicName,'-pip')]",
        "[concat('Microsoft.Network/networkInterfaces/',variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').nicName)]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('availabilitySet').name)]",
        "[concat('Microsoft.Storage/storageAccounts/',toLower(variables('storageConfiguration').bootDiagnostics))]"
      ],
      "properties": {
        "availabilitySet": "[if(equals(variables('deploymentConfiguration').availabilitySetDeployment,'yes'), variables('availabilitySet').id, json('null'))]",
        "licenseType": "[if(equals(variables('deploymentConfiguration').azureHybridBenefitWindows,'yes'), 'Windows_Server', json('null'))]",
        "hardwareProfile": {
          "vmSize": "[variables('vmConfiguration').vmSize]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration))]",
          "adminUsername": "[variables('vmConfiguration').adminUsername]",
          "adminPassword": "[variables('vmConfiguration').adminPassword]",
          "windowsConfiguration": "[if(equals(variables('deploymentConfiguration').operatingSystemSelection,'windows'), variables('windowsConfiguration'), json('null'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[if(equals(variables('deploymentConfiguration').operatingSystemSelection,'windows'), variables('osConfiguration').imagePublisherWindows, if(equals(variables('deploymentConfiguration').operatingSystemSelection,'centos'), variables('osConfiguration').imagePublisherCentOs, variables('osConfiguration').imagePublisherUbuntu))]",
            "offer": "[if(equals(variables('deploymentConfiguration').operatingSystemSelection,'windows'), variables('osConfiguration').imageOfferWindows, if(equals(variables('deploymentConfiguration').operatingSystemSelection,'centos'), variables('osConfiguration').imageOfferCentOs, variables('osConfiguration').imageOfferUbuntu))]",
            "sku": "[if(equals(variables('deploymentConfiguration').operatingSystemSelection,'windows'), variables('osConfiguration').imageVersionWindows, if(equals(variables('deploymentConfiguration').operatingSystemSelection,'centos'),variables('osConfiguration').imageVersionCentOs,variables('osConfiguration').imageVersionUbuntu))]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').osDiskName)]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[if(equals(variables('deploymentConfiguration').publicIpAddressDeployment,'yes'), resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').nicName,'-pip')), resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration),variables('namingSuffix').nicName)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/',variables('storageConfiguration').bootDiagnostics),providers('Microsoft.Storage','storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "apiVersion": "[variables('apiVersion').devTestLab]",
          "type": "Microsoft.DevTestLab/schedules",
          "name": "[concat('shutdown-computevm-',variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration))]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/',variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration))]"
          ],
          "properties": {
            "status": "Enabled",
            "taskType": "ComputeVmShutdownTask",
            "dailyRecurrence": {
              "time": "2000"
            },
            "timeZoneId": "W. Europe Standard Time",
            "notificationSettings": {
              "status": "Disabled",
              "timeInMinutes": 15
            },
            "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines',concat(variables('vmConfiguration').vmName,copyIndex(variables('deploymentConfiguration').vmNumeration)))]"
          }
        }
      ]
    }
  ],
  "outputs": {
    "vmProperties": {
      "type": "object",
      "value": "[variables('outputArray')]"
    }
  }
}
