{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "metadata": {
        "description": "The name of the AKS cluster."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      },
      "minValue": 0,
      "maxValue": 1023
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The number of nodes for the AKS cluster."
      },
      "minValue": 1,
      "maxValue": 100
    },
    "agentVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v3",
      "metadata": {
        "description": "The VM size of the nodes."
      }
    },
    "agentPoolName": {
      "type": "string",
      "defaultValue": "nodepool1",
      "metadata": {
        "description": "The name of the agentpool."
      }
    },
    "agentPoolType": {
      "type": "string",
      "defaultValue": "VirtualMachineScaleSets",
      "allowedValues": [
        "VirtualMachineScaleSets",
        "AvailabilitySet"
      ],
      "metadata": {
        "description": "The type of the agentpool."
      }
    },
    "linuxAdminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Linux nodes."
      }
    },
    "sshRsaPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH RSA public key string. Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "servicePrincipalClientId": {
      "type": "securestring",
      "metadata": {
        "description": "The Servive Principal client id."
      }
    },
    "servicePrincipalClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "The Service Principal client secret."
      }
    },
    "osType": {
      "type": "string",
      "defaultValue": "Linux",
      "allowedValues": [
        "Linux"
      ],
      "metadata": {
        "description": "The type of operating system."
      }
    },
    "kubernetesVersion": {
      "type": "string",
      "defaultValue": "1.13.5",
      "metadata": {
        "description": "The version of Kubernetes."
      }
    },
    "aksRegion": {
      "type": "string",
      "defaultValue": "northeurope",
      "metadata": {
        "description": "Azure region for AKS deployment."
      }
    },
    "enablePodSecurityPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "boolean flag to turn on and off pod security policy."
      }
    },
    "enableAutoScaling": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "boolean flag to turn on and off the cluster autoscaler for the agentpool."
      }
    },
    "maxCount": {
      "type": "int",
      "defaultValue": 6,
      "metadata": {
        "description": "Maximum number of nodes to which the cluster autoscaler can scale out"
      }
    },
    "minCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Minmum number of nodes to which the cluster autoscaler can scale in"
      }
    },
    "maxPods": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Maximum number of pods that can run on a node."
      },
      "maxValue": 110
    },
    "customVnet": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Specify if you want to deploy to a custom VNET."
      }
    },
    "enableAadAuthentication": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Specify if you want to use Azure Active Directory for authentication."
      }
    },
    "enableOmsAgent": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "boolean flag to turn on and off of omsagent addon"
      }
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace name that has the Container Insights solution enabled"
      }
    },
    "workspaceResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace resource group name"
      }
    },
    "enableHttpApplicationRouting": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "boolean flag to turn on and off of http application routing"
      }
    },
    "networkPlugin": {
      "type": "string",
      "defaultValue": "kubenet",
      "allowedValues": [
        "azure",
        "kubenet"
      ],
      "metadata": {
        "description": "Network plugin used for building Kubernetes network."
      }
    },
    "networkPolicy": {
      "type": "string",
      "defaultValue": "calico",
      "allowedValues": [
        "calico",
        "azure",
        "none"
      ],
      "metadata": {
        "description": "Network policy used for building Kubernetes network."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Virtual Network name"
      }
    },
    "vnetSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of virtual network subnet used for nodes and/or pods IP assignment."
      }
    },
    "vnetResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group of the Virtual Network"
      }
    },
    "serviceCidr": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "A CIDR notation IP range from which to assign service cluster IPs."
      }
    },
    "dnsServiceIp": {
      "type": "string",
      "defaultValue": "10.0.0.10",
      "metadata": {
        "description": "Containers DNS server IP address."
      }
    },
    "dockerBridgeCidr": {
      "type": "string",
      "defaultValue": "172.17.0.1/16",
      "metadata": {
        "description": "A CIDR notation IP for Docker bridge."
      }
    },
    "aadClientAppId": {
      "type": "securestring",
      "metadata": {
        "description": "Application id of the AAD client application"
      }
    },
    "aadServerAppId": {
      "type": "securestring",
      "metadata": {
        "description": "Application id of the AAD server application"
      }
    },
    "aadServerAppSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Secret of the AAD server application"
      }
    },
    "aadTenantId": {
      "type": "securestring",
      "metadata": {
        "description": "Tenant id of the AAD tenant"
      }
    }
  },
  "variables": {
    "apiVersion": {
      "aks": "2019-02-01"
    },
    "linuxProfile": {
      "adminUsername": "[parameters('linuxAdminUsername')]",
      "sshRsaPublicKey": "[parameters('sshRsaPublicKey')]"
    },
    "servicePrincipalProfile": {
      "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
      "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]"
    },
    "agentPoolProfiles": {
      "name": "[parameters('agentPoolName')]",
      "maxPods": "[parameters('maxPods')]",
      "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
      "agentCount": "[parameters('agentCount')]",
      "agentVmSize": "[parameters('agentVmSize')]",
      "osType": "[parameters('osType')]",
      "vnetSubnetId": "[concat(resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',parameters('vnetName')),'/subnets/',parameters('vnetSubnetName'))]",
      "enableAutoScaling": "[parameters('enableAutoScaling')]",
      "maxCount": "[parameters('maxCount')]",
      "minCount": "[parameters('minCount')]",
      "type": "[parameters('agentPoolType')]"
    },
    "aksCluster": {
      "clusterName": "[parameters('clusterName')]",
      "dnsPrefix": "[parameters('clusterName')]",
      "location": "[parameters('aksregion')]",
      "kubernetesVersion": "[parameters('kubernetesVersion')]",
      "enableOmsAgent": "[parameters('enableOmsAgent')]",
      "enablePodSecurityPolicy": "[parameters('enablePodSecurityPolicy')]",
      "enableHttpApplicationRouting": "[parameters('enableHttpApplicationRouting')]",
      "workspaceId": "[resourceId(parameters('workspaceResourceGroup'),'Microsoft.OperationalInsights/workspaces',parameters('workspaceName'))]"
    },
    "identityConfiguration": {
      "aadProfile": {
        "clientAppId": "[parameters('aadClientAppId')]",
        "serverAppId": "[parameters('aadServerAppId')]",
        "serverAppSecret": "[parameters('aadServerAppSecret')]",
        "tenantId": "[parameters('aadTenantId')]"
      }
    },
    "networkConfiguration": {
      "networkProfile": {
        "networkPlugin": "[parameters('networkPlugin')]",
        "serviceCidr": "[parameters('serviceCidr')]",
        "dnsServiceIp": "[parameters('dnsServiceIp')]",
        "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
      }
    },
    "networkConfigurationWithPolicy": {
      "networkProfile": {
        "networkPlugin": "[parameters('networkPlugin')]",
        "networkPolicy": "[parameters('networkPolicy')]",
        "serviceCidr": "[parameters('serviceCidr')]",
        "dnsServiceIp": "[parameters('dnsServiceIp')]",
        "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
      }
    },
    "deploymentConfiguration": {
      "customVnet": "[parameters('customVnet')]",
      "enableAadAuthentication": "[parameters('enableAadAuthentication')]",
      "networkPolicy": "[parameters('networkPolicy')]"
    },
    "outputs": {
      "resourceId": "[resourceId('Microsoft.ContainerService/managedClusters/',parameters('clusterName'))]",
      "name": "[parameters('clusterName')]"
    }
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion').aks]",
      "type": "Microsoft.ContainerService/managedClusters",
      "name": "[concat(variables('aksCluster').clusterName)]",
      "location": "[variables('aksCluster').location]",
      "properties": {
        "kubernetesVersion": "[variables('aksCluster').kubernetesVersion]",
        "enableRBAC": true,
        "enablePodSecurityPolicy": "[variables('aksCluster').enablePodSecurityPolicy]",
        "dnsPrefix": "[concat(variables('aksCluster').dnsPrefix)]",
        "addonProfiles": {
          "httpApplicationRouting": {
            "enabled": "[variables('aksCluster').enableHttpApplicationRouting]"
          },
          "omsagent": {
            "enabled": "[variables('aksCluster').enableOmsAgent]",
            "config": {
              "logAnalyticsWorkspaceResourceID": "[variables('aksCluster').workspaceId]"
            }
          }
        },
        "agentPoolProfiles": [
          {
            "name": "[variables('agentPoolProfiles').name]",
            "maxPods": "[variables('agentPoolProfiles').maxPods]",
            "osDiskSizeGB": "[variables('agentPoolProfiles').osDiskSizeGB]",
            "count": "[variables('agentPoolProfiles').agentCount]",
            "vmSize": "[variables('agentPoolProfiles').agentVmSize]",
            "osType": "[variables('agentPoolProfiles').osType]",
            "vnetSubnetID": "[if(equals(variables('deploymentConfiguration').customVnet,'yes'), variables('agentPoolProfiles').vnetSubnetId, json('null'))]",
            "enableAutoScaling": "[if(equals(variables('agentPoolProfiles').type, 'VirtualMachineScaleSets'), variables('agentPoolProfiles').enableAutoScaling, json('null'))]",
            "maxCount": "[if(equals(variables('agentPoolProfiles').type, 'VirtualMachineScaleSets'), if(variables('agentPoolProfiles').enableAutoScaling, variables('agentPoolProfiles').maxCount, json('null')), json('null'))]",
            "minCount": "[if(equals(variables('agentPoolProfiles').type, 'VirtualMachineScaleSets'), if(variables('agentPoolProfiles').enableAutoScaling, variables('agentPoolProfiles').minCount, json('null')), json('null'))]",
            "type": "[variables('agentPoolProfiles').type]"
          }
        ],
        "networkProfile": "[if(equals(variables('deploymentConfiguration').networkPolicy,'none'),if(equals(variables('deploymentConfiguration').customVnet,'yes'), variables('networkConfiguration').networkProfile, json('null')),if(equals(variables('deploymentConfiguration').customVnet,'yes'), variables('networkConfigurationWithPolicy').networkProfile, json('null')))]",
        "linuxProfile": {
          "adminUsername": "[variables('linuxProfile').adminUsername]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[variables('linuxProfile').sshRsaPublicKey]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
          "clientId": "[variables('servicePrincipalProfile').servicePrincipalClientId]",
          "secret": "[variables('servicePrincipalProfile').servicePrincipalClientSecret]"
        },
        "aadProfile": "[if(equals(variables('deploymentConfiguration').enableAadAuthentication,'yes'), variables('identityConfiguration').aadProfile, json('null'))]"
      }
    }
  ],
  "outputs": {
    "aksClusterName": {
      "type": "string",
      "value": "[variables('outputs').name]"
    },
    "aksClusterResourceId": {
      "type": "string",
      "value": "[variables('outputs').resourceId]"
    }
  }
}
